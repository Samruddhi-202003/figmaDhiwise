import '../advisory_screen/widgets/advisory_item_widget.dart';import 'bloc/advisory_bloc.dart';import 'models/advisory_item_model.dart';import 'models/advisory_model.dart';import 'package:dotted_border/dotted_border.dart';import 'package:flutter/material.dart';import 'package:samruddhi_s_application1/core/app_export.dart';import 'package:samruddhi_s_application1/presentation/with_surrender_page/with_surrender_page.dart';import 'package:samruddhi_s_application1/widgets/app_bar/appbar_image.dart';import 'package:samruddhi_s_application1/widgets/app_bar/appbar_title.dart';import 'package:samruddhi_s_application1/widgets/app_bar/custom_app_bar.dart';import 'package:samruddhi_s_application1/widgets/custom_bottom_app_bar.dart';import 'package:samruddhi_s_application1/widgets/custom_icon_button.dart';import 'package:samruddhi_s_application1/widgets/custom_switch.dart';
// ignore_for_file: must_be_immutable
class AdvisoryScreen extends StatelessWidget {AdvisoryScreen({Key? key}) : super(key: key);

GlobalKey<NavigatorState> navigatorKey = GlobalKey();

static Widget builder(BuildContext context) { return BlocProvider<AdvisoryBloc>(create: (context) => AdvisoryBloc(AdvisoryState(advisoryModelObj: AdvisoryModel()))..add(AdvisoryInitialEvent()), child: AdvisoryScreen()); } 
@override Widget build(BuildContext context) { mediaQueryData = MediaQuery.of(context); return SafeArea(child: Scaffold(backgroundColor: theme.colorScheme.onPrimary.withOpacity(1), resizeToAvoidBottomInset: false, appBar: CustomAppBar(leadingWidth: getHorizontalSize(35), leading: AppbarImage(imagePath: ImageConstant.imgLeftarrow1, margin: getMargin(left: 15, top: 10, bottom: 10), onTap: () {onTapLeftarrowone(context);}), centerTitle: true, title: AppbarTitle(text: "lbl_advisory".tr), actions: [Container(height: getVerticalSize(14.009998), width: getHorizontalSize(36), margin: getMargin(left: 15, top: 12, right: 15, bottom: 13), child: Stack(alignment: Alignment.topRight, children: [BlocSelector<AdvisoryBloc, AdvisoryState, bool?>(selector: (state) => state.isSelectedSwitch, builder: (context, isSelectedSwitch) {return CustomSwitch(alignment: Alignment.center, value: isSelectedSwitch, onChange: (value) {context.read<AdvisoryBloc>().add(ChangeSwitchEvent(value: value));});}), Align(alignment: Alignment.topRight, child: Padding(padding: getPadding(left: 15, right: 5, bottom: 1), child: Text("lbl".tr.toUpperCase(), style: CustomTextStyles.labelSmallOrange500)))]))], styleType: Style.bgFill), body: SizedBox(width: double.maxFinite, child: Column(mainAxisAlignment: MainAxisAlignment.start, children: [Container(margin: getMargin(top: 10), padding: getPadding(left: 21, top: 2, right: 21, bottom: 2), decoration: AppDecoration.fillRedA70001.copyWith(borderRadius: BorderRadiusStyle.customBorderTL20), child: Text("lbl_time_remaining2".tr.toUpperCase(), style: CustomTextStyles.labelMediumOnPrimary)), Padding(padding: getPadding(left: 90, top: 1, right: 90), child: DottedBorder(color: appTheme.redA70001, padding: EdgeInsets.only(left: getHorizontalSize(1), top: getVerticalSize(1), right: getHorizontalSize(1), bottom: getVerticalSize(1)), strokeWidth: getHorizontalSize(1), radius: Radius.circular(30), borderType: BorderType.RRect, dashPattern: [3, 3], child: Container(padding: getPadding(left: 38, top: 2, right: 38, bottom: 2), decoration: AppDecoration.outlineRedA700011.copyWith(borderRadius: BorderRadiusStyle.circleBorder30), child: Column(mainAxisSize: MainAxisSize.min, crossAxisAlignment: CrossAxisAlignment.start, mainAxisAlignment: MainAxisAlignment.end, children: [CustomImageView(imagePath: ImageConstant.imgTime17, height: getVerticalSize(30), width: getHorizontalSize(102), margin: getMargin(top: 6)), Padding(padding: getPadding(top: 1, right: 6), child: Row(mainAxisAlignment: MainAxisAlignment.spaceBetween, children: [Text("lbl_months".tr.toUpperCase(), style: CustomTextStyles.labelMediumBluegray80001_1), Text("lbl_days".tr.toUpperCase(), style: CustomTextStyles.labelMediumBluegray80001_1)]))])))), CustomImageView(imagePath: ImageConstant.imgPitchmeetingrafiki1, height: getVerticalSize(160), width: getHorizontalSize(233), margin: getMargin(top: 15)), Container(margin: getMargin(left: 15, top: 15, right: 15), decoration: AppDecoration.outlinePrimary.copyWith(borderRadius: BorderRadiusStyle.roundedBorder5), child: Column(mainAxisSize: MainAxisSize.min, mainAxisAlignment: MainAxisAlignment.start, children: [Container(padding: getPadding(left: 10, top: 1, right: 10, bottom: 1), decoration: AppDecoration.fillPink.copyWith(borderRadius: BorderRadiusStyle.customBorderTL5), child: Text("lbl_description".tr, style: CustomTextStyles.titleMediumOnPrimary)), Container(width: getHorizontalSize(305), margin: getMargin(left: 10, top: 4, right: 14, bottom: 8), child: Text("msg_as_indians_our".tr, maxLines: 6, overflow: TextOverflow.ellipsis, style: CustomTextStyles.titleSmallBluegray80001Medium.copyWith(height: 1.29)))])), Align(alignment: Alignment.centerLeft, child: Padding(padding: getPadding(left: 15, top: 8), child: Text("lbl_how_it_works".tr, style: CustomTextStyles.titleMedium18_1))), Spacer(), Expanded(child: Padding(padding: getPadding(left: 15, right: 15), child: BlocSelector<AdvisoryBloc, AdvisoryState, AdvisoryModel?>(selector: (state) => state.advisoryModelObj, builder: (context, advisoryModelObj) {return ListView.separated(physics: NeverScrollableScrollPhysics(), shrinkWrap: true, separatorBuilder: (context, index) {return SizedBox(height: getVerticalSize(5));}, itemCount: advisoryModelObj?.advisoryItemList.length ?? 0, itemBuilder: (context, index) {AdvisoryItemModel model = advisoryModelObj?.advisoryItemList[index] ?? AdvisoryItemModel(); return AdvisoryItemWidget(model);});}))), Container(height: getVerticalSize(57), width: double.maxFinite, decoration: AppDecoration.outlineBlack9000111, child: Stack(alignment: Alignment.topCenter, children: [Align(alignment: Alignment.bottomCenter, child: Container(width: double.maxFinite, margin: getMargin(top: 13), padding: getPadding(top: 2, bottom: 2), decoration: AppDecoration.outlineBlack9000112, child: Row(mainAxisAlignment: MainAxisAlignment.spaceAround, children: [GestureDetector(onTap: () {onTapColumnhome(context);}, child: Padding(padding: getPadding(top: 1), child: Column(mainAxisAlignment: MainAxisAlignment.start, children: [CustomIconButton(height: getSize(24), width: getSize(24), padding: getPadding(all: 5), decoration: IconButtonStyleHelper.fillGrayTL12, child: CustomImageView(imagePath: ImageConstant.imgNavhome13x13)), Padding(padding: getPadding(top: 1), child: Text("lbl_home".tr.toUpperCase(), style: CustomTextStyles.hindBluegray80001))]))), Padding(padding: getPadding(top: 1), child: Column(mainAxisAlignment: MainAxisAlignment.start, children: [CustomIconButton(height: getSize(24), width: getSize(24), padding: getPadding(all: 5), decoration: IconButtonStyleHelper.fillGrayTL121, child: CustomImageView(imagePath: ImageConstant.imgNavfinancialplan)), Padding(padding: getPadding(top: 1), child: Text("lbl_financial_plan".tr.toUpperCase(), style: CustomTextStyles.hindBluegray80001))])), Padding(padding: getPadding(top: 27), child: Text("lbl_transaction".tr.toUpperCase(), style: CustomTextStyles.hindBluegray80001)), GestureDetector(onTap: () {onTapColumnadvisory(context);}, child: Padding(padding: getPadding(top: 1), child: Column(crossAxisAlignment: CrossAxisAlignment.start, mainAxisAlignment: MainAxisAlignment.start, children: [CustomIconButton(height: getSize(24), width: getSize(24), margin: getMargin(left: 4), padding: getPadding(all: 5), decoration: IconButtonStyleHelper.gradientOrangeToPrimary, child: CustomImageView(imagePath: ImageConstant.imgGroup898)), Padding(padding: getPadding(top: 1), child: Text("lbl_advisory".tr.toUpperCase(), style: CustomTextStyles.hindPrimary))]))), GestureDetector(onTap: () {onTapColumnmonitorin(context);}, child: Padding(padding: getPadding(top: 1), child: Column(mainAxisAlignment: MainAxisAlignment.start, children: [CustomIconButton(height: getSize(24), width: getSize(24), padding: getPadding(all: 5), decoration: IconButtonStyleHelper.fillGrayTL121, child: CustomImageView(imagePath: ImageConstant.imgNavmonitoring)), Padding(padding: getPadding(top: 1), child: Text("lbl_monitoring".tr.toUpperCase(), style: CustomTextStyles.hindBluegray80001))])))]))), CustomImageView(imagePath: ImageConstant.imgNavtransaction, height: getSize(40), width: getSize(40), alignment: Alignment.topCenter, onTap: () {onTapImgFloatingicon(context);})]))])), bottomNavigationBar: CustomBottomAppBar(onChanged: (BottomBarEnum type) {Navigator.pushNamed(navigatorKey.currentContext!, getCurrentRoute(type));}))); } 
///Handling route based on bottom click actions
String getCurrentRoute(BottomBarEnum type) { switch (type) {case BottomBarEnum.Home: return "/"; case BottomBarEnum.Financialplan: return "/"; case BottomBarEnum.Transaction: return AppRoutes.withSurrenderPage; case BottomBarEnum.Advisory: return "/"; case BottomBarEnum.Monitoring: return "/"; default: return "/";} } 
///Handling page based on route
Widget getCurrentPage(BuildContext context, String currentRoute, ) { switch (currentRoute) {case AppRoutes.withSurrenderPage: return WithSurrenderPage.builder(context); default: return DefaultWidget();} } 
/// Navigates to the dashboardScreen when the action is triggered.
///
/// The [BuildContext] parameter is used to build the navigation stack.
/// When the action is triggered, this function uses the [NavigatorService]
/// to push the named route for the dashboardScreen.
onTapLeftarrowone(BuildContext context) { NavigatorService.pushNamed(AppRoutes.dashboardScreen, ); } 
/// Navigates to the dashboardScreen when the action is triggered.
///
/// The [BuildContext] parameter is used to build the navigation stack.
/// When the action is triggered, this function uses the [NavigatorService]
/// to push the named route for the dashboardScreen.
onTapColumnhome(BuildContext context) { NavigatorService.pushNamed(AppRoutes.dashboardScreen, ); } 
/// Navigates to the monitoringScreen when the action is triggered.
///
/// The [BuildContext] parameter is used to build the navigation stack.
/// When the action is triggered, this function uses the [NavigatorService]
/// to push the named route for the monitoringScreen.
onTapColumnadvisory(BuildContext context) { NavigatorService.pushNamed(AppRoutes.monitoringScreen, ); } 
/// Navigates to the monitoringScreen when the action is triggered.
///
/// The [BuildContext] parameter is used to build the navigation stack.
/// When the action is triggered, this function uses the [NavigatorService]
/// to push the named route for the monitoringScreen.
onTapColumnmonitorin(BuildContext context) { NavigatorService.pushNamed(AppRoutes.monitoringScreen, ); } 
/// Navigates to the transactionScreen when the action is triggered.
///
/// The [BuildContext] parameter is used to build the navigation stack.
/// When the action is triggered, this function uses the [NavigatorService]
/// to push the named route for the transactionScreen.
onTapImgFloatingicon(BuildContext context) { NavigatorService.pushNamed(AppRoutes.transactionScreen, ); } 
 }
