import 'bloc/transaction_goal_bloc.dart';import 'models/transaction_goal_model.dart';import 'package:flutter/material.dart';import 'package:samruddhi_s_application1/core/app_export.dart';import 'package:samruddhi_s_application1/presentation/with_surrender_page/with_surrender_page.dart';import 'package:samruddhi_s_application1/widgets/app_bar/appbar_image.dart';import 'package:samruddhi_s_application1/widgets/app_bar/appbar_subtitle_2.dart';import 'package:samruddhi_s_application1/widgets/app_bar/appbar_title.dart';import 'package:samruddhi_s_application1/widgets/app_bar/custom_app_bar.dart';import 'package:samruddhi_s_application1/widgets/custom_bottom_app_bar.dart';import 'package:samruddhi_s_application1/widgets/custom_drop_down.dart';import 'package:samruddhi_s_application1/widgets/custom_elevated_button.dart';import 'package:samruddhi_s_application1/widgets/custom_floating_text_field.dart';
// ignore_for_file: must_be_immutable
class TransactionGoalScreen extends StatelessWidget {TransactionGoalScreen({Key? key}) : super(key: key);

GlobalKey<NavigatorState> navigatorKey = GlobalKey();

static Widget builder(BuildContext context) { return BlocProvider<TransactionGoalBloc>(create: (context) => TransactionGoalBloc(TransactionGoalState(transactionGoalModelObj: TransactionGoalModel()))..add(TransactionGoalInitialEvent()), child: TransactionGoalScreen()); } 
@override Widget build(BuildContext context) { mediaQueryData = MediaQuery.of(context); return SafeArea(child: Scaffold(backgroundColor: theme.colorScheme.onPrimary.withOpacity(1), resizeToAvoidBottomInset: false, appBar: CustomAppBar(leadingWidth: getHorizontalSize(35), leading: AppbarImage(imagePath: ImageConstant.imgLeftarrow1, margin: getMargin(left: 15, top: 10, bottom: 10), onTap: () {onTapLeftarrowone(context);}), centerTitle: true, title: AppbarTitle(text: "lbl_add_goals".tr), actions: [Container(margin: getMargin(left: 15, top: 13, right: 15, bottom: 13), padding: getPadding(left: 2, right: 2), decoration: AppDecoration.outlineOrange5003.copyWith(borderRadius: BorderRadiusStyle.roundedBorder2), child: Row(mainAxisAlignment: MainAxisAlignment.center, children: [Container(height: getSize(10), width: getSize(10), margin: getMargin(top: 2, bottom: 2), decoration: BoxDecoration(color: appTheme.orange500, borderRadius: BorderRadius.circular(getHorizontalSize(2)))), AppbarSubtitle2(text: "lbl7".tr.toUpperCase(), margin: getMargin(left: 4, right: 5, bottom: 1))]))], styleType: Style.bgFill), body: Container(width: double.maxFinite, padding: getPadding(all: 15), child: Column(mainAxisAlignment: MainAxisAlignment.start, children: [Container(padding: getPadding(left: 15, top: 14, right: 15, bottom: 14), decoration: AppDecoration.outlineGray3001.copyWith(borderRadius: BorderRadiusStyle.roundedBorder5), child: Column(mainAxisSize: MainAxisSize.min, mainAxisAlignment: MainAxisAlignment.start, children: [BlocSelector<TransactionGoalBloc, TransactionGoalState, TransactionGoalModel?>(selector: (state) => state.transactionGoalModelObj, builder: (context, transactionGoalModelObj) {return CustomDropDown(icon: Container(margin: getMargin(left: 30, right: 15), child: CustomImageView(imagePath: ImageConstant.imgCalendar1, height: getVerticalSize(11), width: getHorizontalSize(12))), hintText: "msg_select_goals_type".tr, hintStyle: theme.textTheme.titleMedium!, items: transactionGoalModelObj?.dropdownItemList ?? [], onChanged: (value) {context.read<TransactionGoalBloc>().add(ChangeDropDownEvent(value: value));});}), BlocSelector<TransactionGoalBloc, TransactionGoalState, TransactionGoalModel?>(selector: (state) => state.transactionGoalModelObj, builder: (context, transactionGoalModelObj) {return CustomDropDown(icon: Container(margin: getMargin(left: 30, right: 15), child: CustomImageView(imagePath: ImageConstant.imgCalendar1, height: getVerticalSize(11), width: getHorizontalSize(12))), margin: getMargin(top: 14), hintText: "lbl_select_member".tr, hintStyle: CustomTextStyles.titleMediumGray300, items: transactionGoalModelObj?.dropdownItemList1 ?? [], onChanged: (value) {context.read<TransactionGoalBloc>().add(ChangeDropDown1Event(value: value));});}), BlocSelector<TransactionGoalBloc, TransactionGoalState, TextEditingController?>(selector: (state) => state.amountController, builder: (context, amountController) {return CustomFloatingTextField(margin: getMargin(top: 14), controller: amountController, labelText: "lbl_current_amount".tr, labelStyle: CustomTextStyles.labelLargeMedium, hintText: "lbl_current_amount".tr, hintStyle: CustomTextStyles.labelLargeMedium, textInputAction: TextInputAction.done, contentPadding: getPadding(left: 19, right: 19, bottom: 12), borderDecoration: FloatingTextFormFieldStyleHelper.underLine);}), Container(height: getVerticalSize(53), width: getHorizontalSize(300), margin: getMargin(top: 13, bottom: 7), child: Stack(alignment: Alignment.topLeft, children: [Align(alignment: Alignment.bottomCenter, child: Container(margin: getMargin(top: 9), padding: getPadding(left: 14, top: 8, right: 14, bottom: 8), decoration: AppDecoration.outlineGray3002.copyWith(borderRadius: BorderRadiusStyle.roundedBorder5), child: Row(mainAxisAlignment: MainAxisAlignment.spaceBetween, children: [Padding(padding: getPadding(top: 1), child: Text("lbl_11_02_2024".tr, style: CustomTextStyles.titleMediumBluegray100)), CustomImageView(imagePath: ImageConstant.imgCalendar114x14, height: getSize(14), width: getSize(14), margin: getMargin(top: 6, bottom: 6))]))), Align(alignment: Alignment.topLeft, child: Padding(padding: getPadding(top: 8), child: SizedBox(width: getHorizontalSize(78), child: Divider(color: appTheme.gray50, indent: getHorizontalSize(10))))), Align(alignment: Alignment.topLeft, child: Padding(padding: getPadding(left: 15), child: Text("lbl_time_in_years".tr, style: CustomTextStyles.labelMediumGray600)))]))])), CustomElevatedButton(width: getHorizontalSize(180), text: "lbl_calculate".tr.toUpperCase(), margin: getMargin(top: 25, bottom: 25), onTap: () {onTapCalculate(context);})])), bottomNavigationBar: CustomBottomAppBar(onChanged: (BottomBarEnum type) {Navigator.pushNamed(navigatorKey.currentContext!, getCurrentRoute(type));}))); } 
///Handling route based on bottom click actions
String getCurrentRoute(BottomBarEnum type) { switch (type) {case BottomBarEnum.Home: return "/"; case BottomBarEnum.Financialplan: return "/"; case BottomBarEnum.Transaction: return AppRoutes.withSurrenderPage; case BottomBarEnum.Advisory: return "/"; case BottomBarEnum.Monitoring: return "/"; default: return "/";} } 
///Handling page based on route
Widget getCurrentPage(BuildContext context, String currentRoute, ) { switch (currentRoute) {case AppRoutes.withSurrenderPage: return WithSurrenderPage.builder(context); default: return DefaultWidget();} } 
/// Navigates to the transactionScreen when the action is triggered.
///
/// The [BuildContext] parameter is used to build the navigation stack.
/// When the action is triggered, this function uses the [NavigatorService]
/// to push the named route for the transactionScreen.
onTapLeftarrowone(BuildContext context) { NavigatorService.pushNamed(AppRoutes.transactionScreen, ); } 
/// Navigates to the transactionGoalDetailsScreen when the action is triggered.
///
/// The [BuildContext] parameter is used to build the navigation stack.
/// When the action is triggered, this function uses the [NavigatorService]
/// to push the named route for the transactionGoalDetailsScreen.
onTapCalculate(BuildContext context) { NavigatorService.pushNamed(AppRoutes.transactionGoalDetailsScreen, ); } 
 }
